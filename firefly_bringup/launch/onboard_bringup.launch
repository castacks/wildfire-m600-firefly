<launch>
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find firefly_bringup)/config/rosconsole.config" />
  <env name="ROS_PYTHON_LOG_CONFIG_FILE" value="$(find firefly_bringup)/config/python_logging.conf" />

  <arg name="replay_mode" default="false" />
  <arg name="open_flir" default="true" />
  <arg name="continuous" default="true" />
  <arg name="threshold" default="30" />
  <arg name="robot_name" default="uav1" />
  <arg name="drone_interface" default="DJIInterface" />
  <arg name="run_ca_stack" default="true" />
  <arg name="map_resolution" default="0.5" />
  <arg name="terrain_resolution" default="2.5" />
  <arg name="map_min_x" default="-1000" />
  <arg name="map_max_x" default="1000" />
  <arg name="map_min_y" default="-1000" />
  <arg name="map_max_y" default="100" />
  <arg name="record" default="true" />

  <group ns="$(arg robot_name)">
    <node pkg="firefly_mapping" type="onboard_mapping" name="onboard_mapping" output="screen">
      <param name="resolution" value="$(arg map_resolution)" />
      <param name="min_x" value="$(arg map_min_x)" />
      <param name="max_x" value="$(arg map_max_x)" />
      <param name="min_y" value="$(arg map_min_y)" />
      <param name="max_y" value="$(arg map_max_y)" />
    </node>
    <node pkg="firefly_telemetry" type="onboard_telemetry.py" name="onboard_telemetry" output="screen" />
    <node pkg="firefly_perception" type="firefly_perception" name="firefly_perception" output="screen">
      <param name="threshold" value="$(arg threshold)" />
      <param name="continuous" value="$(arg continuous)" />
    </node>
    <!-- <node pkg="firefly_perception" type="lidar_perception" name="lidar_perception" output="screen" /> -->
    <!-- <node pkg="firefly_mapping" type="terrain_mapping" name="terrain_mapping" output="screen">
      <param name="terrain_resolution" value="$(arg terrain_resolution)" />
      <param name="min_x" value="$(arg map_min_x)" />
      <param name="max_x" value="$(arg map_max_x)" />
      <param name="min_y" value="$(arg map_min_y)" />
      <param name="max_y" value="$(arg map_max_y)" />
    </node> -->
    <!-- <node pkg="firefly_bringup" type="pcb_interface.py" name="pcb_interface" output="screen" /> -->

    <!-- <node pkg="grid_map_visualization" type="grid_map_visualization" name="grid_map_visualization" output="screen">
      <rosparam command="load" file="$(find firefly_mapping)/config/grid_map.yaml" />
    </node> -->
    <group unless="$(arg replay_mode)">
      <include file="$(find dji_sdk)/launch/sdk.launch" />
      <include file="$(find seek_driver)/launch/seek_driver.launch" />
      <include file="$(find flir_ros_sync)/launch/wildfire/M600/wildfire-m600.launch" if="$(arg open_flir)"/>
      <include file="$(find core_central)/launch/dji/sim/dji_sim_state_estimation.launch" pass_all_args="true" />
      <!-- <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch" /> -->
      <node pkg="tf" type="static_transform_publisher" name="base_to_thermal_camera_link" args="0.0253145 0.056098 -0.27658746 -1.5707963 0 3.14159 $(arg robot_name)/base_link $(arg robot_name)/thermal/camera_link 100" />
      <!-- <node pkg="tf" type="static_transform_publisher" name="base_to_lidar" args="0.17 -0.03 -0.15 -1.5707963 0 -1.5707963 $(arg robot_name)/base_link $(arg robot_name)/lidar 100" /> -->

      <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find firefly_mapping)/rviz/terrain_mapping.rviz"/> -->

      <group if="$(arg run_ca_stack)">
        <include file="$(find core_central)/launch/dji/sim/dji_sim_control.launch" pass_all_args="true" />
        <include file="$(find firefly_control)/launch/autonomy.launch" pass_all_args="true" />
        <node pkg="firefly_control" type="ipp_plan_to_trajectory.py" name="ipp_plan_to_trajectory" output="screen" />
        <node pkg="planner_map_interfaces" type="pub_fixed_plan_request_on_demand.py" name="pub_fixed_plan_request_on_demand" output="screen" />
      </group>
    </group>
  </group>

  <node pkg="tf2_ros" type="static_transform_publisher" name="static_transform_publisher" args="0 0 0 0 0 0 /uav1/map /local_enu" />

  <remap from="odom" to="odometry" />
  <include file="$(find ipp_planners)/launch/main.launch" pass_all_args="true">
    <arg name="config" value="journal_m600" />
    <arg name="robot_name" value="$(arg robot_name)" />
    <arg name="planner" value="tigris" />
    <arg name="search" value="true" />
    <arg name="track" value="false" />
    <arg name="sim" value="false" />
    <arg name="rviz" value="true" />
    <arg name="perception" value="true" />
    <arg name="vis_while_planning" value="false" />
    <arg name="loglevel" value="info" />
	  <arg name="use_docker_obj_det" value="true" />
  </include>

  <node name="record" pkg="rosbag" type="record" args="
  /tf 
  /uav1/global_path
  /uav1/odometry 
  /uav1/thermal/image
	/uav1/object_detection/detected_bboxes
	/uav1/seek_camera/displayImage
	/seek_camera/filteredImage
	/seek_camera/temperatureImageCelcius
  /uav1/waypoint_num
  -o /mnt/nvme0n1/data/m600_perception.bag" if="$(arg record)"/>
</launch>
