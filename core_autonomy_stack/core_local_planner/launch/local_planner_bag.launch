<launch>

  <node name="local_planner_drone" pkg="local_planner_drone" type="local_planner" output="screen">
    <param name="execute_target" type="double" value="5" />

    <remap from="/local_planner_global_plan_vis" to="/local_planner_global_plan_vis_debug" />
    
    <param name="trajectory_library_config" type="string" value="$(find trajectory_library)/config/acceleration_magnitudes.yaml" />
    
    <param name="waypoint_spacing" type="double" value="0.2" />
    <param name="obstacle_check_radius" type="double" value="2." />
    <param name="obstacle_check_points" type="int" value="5" />
    <param name="obstacle_penalty_weight" type="double" value="0." />
    <param name="forward_progress_penalty_weight" type="double" value="5.0" />
    <param name="look_past_distance" type="double" value="0" />
    <!-- <param name="use_fixed_height" type="bool" value="true" /> -->
    <!-- 0: use height from global plan, 1: use a fixed height, 2: use range sensors for height above ground setpoint -->
    <param name="height_mode" type="int" value="2" />
    <param name="height_above_ground" type="double" value="1.0" />
    <param name="fixed_height" type="double" value="1.0" />

    <param name="waypoint_buffer_duration" type="double" value="35." />
    
    <!-- takeoff/landing parameters -->
    <param name="takeoff_height" type="double" value="1.0" />
    <param name="takeoff_velocity" type="double" value="0.2" />
    <param name="takeoff_acceptance_distance" type="double" value="0.3" />
    <param name="takeoff_acceptance_time" type="double" value="1.0" />
    <param name="landing_stationary_distance_threshold" type="double" value="0.05" />
    <param name="landing_acceptance_time" type="double" value="5.0" />
    <param name="safe_spot_target_frame" type="string" value="map" />
    <param name="safe_spot_comms_timeout" type="double" value="2." />
    <param name="safe_spot_landing_point_history" type="int" value="3" />
    <param name="safe_spot_tracking_point_tolerance" type="double" value="0.05" />
    
    <!-- 0: use the yaw from the subscribed trajectory, 1: smoothly vary the yaw in the direction of the subscribed trajectory -->
    <param name="yaw_mode" type="int" value="1" />
    
    <param name="robot_radius" type="double" value="0.35" />
    
    <param name="pointcloud_map/node_spacing" type="double" value="1.0" />
    <param name="pointcloud_map/node_limit" type="int" value="5" />
    <param name="pointcloud_map/target_frame" type="string" value="map" />
    <param name="pointcloud_map/lidar_frame" type="string" value="/velodyne" />
    <param name="pointcloud_map/lidar_vertical_fov" type="double" value="30." />
    <param name="pointcloud_map/robot_radius" type="double" value="0.6" />
    <param name="pointcloud_map/obstacle_check_radius" type="double" value="2." />
    <param name="pointcloud_map/obstacle_check_points" type="int" value="5" />

    <remap from="/uav1/points" to="/velodyne_cloud_registered" />
    <remap from="/range_up" to="/uav1/teraranger_one_up" />
    <remap from="/range_down" to="/uav1/teraranger_one_down" />
    <remap from="/uav1/points" to="/velodyne_cloud_registered" />
  </node>
  
  <!-- <node name="test_global_planner" pkg="local_planner" type="test_global_planner.py" /> -->
  <!-- <node name="pose_to_path" pkg="local_planner" type="pose_to_path.py" /> -->
  
</launch>
